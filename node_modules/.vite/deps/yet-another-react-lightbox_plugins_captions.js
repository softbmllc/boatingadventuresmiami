import {
  MODULE_CONTROLLER,
  PLUGIN_CAPTIONS,
  YARL_EVENT_TOOLBAR_WIDTH,
  clsx,
  createModule,
  cssClass,
  cssVar,
  makeUseContext,
  useEvents
} from "./chunk-6PS7IDHY.js";
import "./chunk-NYHBQTAG.js";
import {
  __toESM,
  require_react
} from "./chunk-P5XWQMHZ.js";

// node_modules/yet-another-react-lightbox/dist/plugins/captions/Captions.js
var React4 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/captions/CaptionsContext.js
var React = __toESM(require_react(), 1);
var CaptionsContext = React.createContext(null);
var useCaptions = makeUseContext("useCaptions", "CaptionsContext", CaptionsContext);
function CaptionsContextProvider({ children }) {
  const { subscribe } = useEvents();
  const [toolbarWidth, setToolbarWidth] = React.useState();
  React.useEffect(() => subscribe(YARL_EVENT_TOOLBAR_WIDTH, (event) => setToolbarWidth(event)), [subscribe]);
  const context = React.useMemo(() => ({ toolbarWidth }), [toolbarWidth]);
  return React.createElement(CaptionsContext.Provider, { value: context }, children);
}

// node_modules/yet-another-react-lightbox/dist/plugins/captions/Description.js
var React2 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/captions/utils.js
function cssPrefix(className) {
  return cssClass(`slide_${className}`);
}

// node_modules/yet-another-react-lightbox/dist/plugins/captions/Description.js
function Description({ description, descriptionTextAlign, descriptionMaxLines, styles }) {
  return React2.createElement(
    "div",
    { style: styles.captionsDescriptionContainer, className: clsx(cssPrefix("captions_container"), cssPrefix("description_container")) },
    React2.createElement("div", { className: cssPrefix("description"), style: {
      ...descriptionTextAlign !== defaultCaptionsProps.descriptionTextAlign || descriptionMaxLines !== defaultCaptionsProps.descriptionMaxLines ? {
        [cssVar("slide_description_text_align")]: descriptionTextAlign,
        [cssVar("slide_description_max_lines")]: descriptionMaxLines
      } : null,
      ...styles.captionsDescription
    } }, typeof description === "string" ? description.split("\n").flatMap((line, index) => [...index > 0 ? [React2.createElement("br", { key: index })] : [], line]) : description)
  );
}

// node_modules/yet-another-react-lightbox/dist/plugins/captions/Title.js
var React3 = __toESM(require_react(), 1);
function Title({ title, styles }) {
  const { toolbarWidth } = useCaptions();
  return React3.createElement(
    "div",
    { style: styles.captionsTitleContainer, className: clsx(cssPrefix("captions_container"), cssPrefix("title_container")) },
    React3.createElement("div", { style: styles.captionsTitle, className: cssPrefix("title"), ...toolbarWidth ? { style: { [cssVar("toolbar_width")]: `${toolbarWidth}px` } } : null }, title)
  );
}

// node_modules/yet-another-react-lightbox/dist/plugins/captions/Captions.js
var defaultCaptionsProps = {
  descriptionTextAlign: "start",
  descriptionMaxLines: 3
};
var Captions = ({ augment, addParent }) => {
  addParent(MODULE_CONTROLLER, createModule(PLUGIN_CAPTIONS, CaptionsContextProvider));
  augment(({ render: { slideFooter: renderFooter, ...restRender }, captions, styles, ...restProps }) => ({
    render: {
      slideFooter: (slide) => React4.createElement(
        React4.Fragment,
        null,
        renderFooter === null || renderFooter === void 0 ? void 0 : renderFooter(slide),
        slide.title && React4.createElement(Title, { styles, title: slide.title }),
        slide.description && React4.createElement(Description, { styles, description: slide.description, ...{ ...defaultCaptionsProps, ...captions } })
      ),
      ...restRender
    },
    styles,
    ...restProps
  }));
};

// node_modules/yet-another-react-lightbox/dist/plugins/captions/index.js
var captions_default = Captions;
export {
  captions_default as default
};
//# sourceMappingURL=yet-another-react-lightbox_plugins_captions.js.map
