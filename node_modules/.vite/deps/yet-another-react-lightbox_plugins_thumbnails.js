import {
  ACTION_NEXT,
  ACTION_PREV,
  ACTION_SWIPE,
  CLASS_FLEX_CENTER,
  CLASS_FULLSIZE,
  ELEMENT_ICON,
  ImageSlide,
  MODULE_CONTROLLER,
  PLUGIN_FULLSCREEN,
  PLUGIN_THUMBNAILS,
  cleanup,
  clsx,
  composePrefix,
  createIcon,
  createModule,
  cssClass,
  cssVar,
  getSlide,
  isImageSlide,
  makeComposePrefix,
  useAnimation,
  useEventCallback,
  useEvents,
  useLightboxState,
  useRTL
} from "./chunk-6PS7IDHY.js";
import "./chunk-NYHBQTAG.js";
import {
  __toESM,
  require_react
} from "./chunk-P5XWQMHZ.js";

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/ThumbnailsContainer.js
var React3 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/utils.js
var cssPrefix = (value) => composePrefix(PLUGIN_THUMBNAILS, value);
var cssThumbnailPrefix = (value) => cssPrefix(composePrefix("thumbnail", value));

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/ThumbnailsTrack.js
var React2 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/Thumbnail.js
var React = __toESM(require_react(), 1);
var VideoThumbnailIcon = createIcon("VideoThumbnail", React.createElement("path", { d: "M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" }));
var UnknownThumbnailIcon = createIcon("UnknownThumbnail", React.createElement("path", { d: "M23 18V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zM8.5 12.5l2.5 3.01L14.5 11l4.5 6H5l3.5-4.5z" }));
function renderThumbnail({ slide, render, rect, imageFit }) {
  var _a;
  const customThumbnail = (_a = render.thumbnail) === null || _a === void 0 ? void 0 : _a.call(render, { slide, render, rect, imageFit });
  if (customThumbnail) {
    return customThumbnail;
  }
  const thumbnailIconClass = cssClass(cssThumbnailPrefix(ELEMENT_ICON));
  if (!isImageSlide(slide)) {
    if (slide.type === "video") {
      return React.createElement(
        React.Fragment,
        null,
        "poster" in slide && React.createElement("img", { alt: "", src: slide.poster, className: clsx(cssClass(CLASS_FULLSIZE), cssClass(cssPrefix("contain_image"))) }),
        React.createElement(VideoThumbnailIcon, { className: thumbnailIconClass })
      );
    }
  } else {
    return React.createElement(ImageSlide, { slide, render, rect, imageFit });
  }
  return React.createElement(UnknownThumbnailIcon, { className: thumbnailIconClass });
}
var activePrefix = makeComposePrefix("active");
var fadeInPrefix = makeComposePrefix("fadein");
var fadeOutPrefix = makeComposePrefix("fadeout");
var placeholderPrefix = makeComposePrefix("placeholder");
var DELAY = "delay";
var DURATION = "duration";
function Thumbnail({ rect, slide, onClick, active, fadeIn, fadeOut, placeholder, render, imageFit, style }) {
  return React.createElement("button", { type: "button", className: clsx(cssClass(CLASS_FLEX_CENTER), cssClass(cssThumbnailPrefix()), active && cssClass(cssThumbnailPrefix(activePrefix())), fadeIn && cssClass(cssThumbnailPrefix(fadeInPrefix())), fadeOut && cssClass(cssThumbnailPrefix(fadeOutPrefix())), placeholder && cssClass(cssThumbnailPrefix(placeholderPrefix()))), style: {
    ...fadeIn ? {
      [cssVar(cssThumbnailPrefix(fadeInPrefix(DURATION)))]: `${fadeIn.duration}ms`,
      [cssVar(cssThumbnailPrefix(fadeInPrefix(DELAY)))]: `${fadeIn.delay}ms`
    } : null,
    ...fadeOut ? {
      [cssVar(cssThumbnailPrefix(fadeOutPrefix(DURATION)))]: `${fadeOut.duration}ms`,
      [cssVar(cssThumbnailPrefix(fadeOutPrefix(DELAY)))]: `${fadeOut.delay}ms`
    } : null,
    ...style
  }, onClick }, slide && renderThumbnail({ slide, render, rect, imageFit }));
}

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/ThumbnailsTrack.js
function isHorizontal(position) {
  return ["top", "bottom"].includes(position);
}
function boxSize(thumbnails, dimension, includeGap) {
  return dimension + 2 * (thumbnails.border + thumbnails.padding) + (includeGap ? thumbnails.gap : 0);
}
function ThumbnailsTrack({ container, slides, carousel, render, thumbnails, thumbnailRect, styles }) {
  const track = React2.useRef(null);
  const { globalIndex, animation } = useLightboxState().state;
  const { publish, subscribe } = useEvents();
  const isRTL = useRTL();
  const index = globalIndex;
  const animationDuration = (animation === null || animation === void 0 ? void 0 : animation.duration) || 0;
  const offset = animationDuration > 0 && (animation === null || animation === void 0 ? void 0 : animation.increment) || 0;
  const animate = useAnimation(track, (snapshot) => ({
    keyframes: isHorizontal(thumbnails.position) ? [
      {
        transform: `translateX(${(isRTL ? -1 : 1) * boxSize(thumbnails, thumbnails.width, true) * offset + snapshot}px)`
      },
      { transform: "translateX(0)" }
    ] : [
      {
        transform: `translateY(${boxSize(thumbnails, thumbnails.height, true) * offset + snapshot}px)`
      },
      { transform: "translateY(0)" }
    ],
    duration: animationDuration,
    easing: animation === null || animation === void 0 ? void 0 : animation.easing
  }));
  const handleControllerSwipe = useEventCallback(() => {
    let animationOffset;
    if (container.current && track.current) {
      const containerRect = container.current.getBoundingClientRect();
      const trackRect = track.current.getBoundingClientRect();
      animationOffset = isHorizontal(thumbnails.position) ? trackRect.left - containerRect.left - (containerRect.width - trackRect.width) / 2 : trackRect.top - containerRect.top - (containerRect.height - trackRect.height) / 2;
    } else {
      animationOffset = 0;
    }
    animate(animationOffset);
  });
  React2.useEffect(() => cleanup(subscribe(ACTION_SWIPE, handleControllerSwipe)), [subscribe, handleControllerSwipe]);
  const { finite } = carousel;
  const preload = Math.max(Math.min(carousel.preload, slides.length - 1), 0);
  const items = [];
  if (slides.length > 0) {
    if (offset < 0) {
      for (let i = index - preload + offset; i < index - preload; i += 1) {
        items.push({ slide: null, index: i, placeholder: true });
      }
    }
    for (let i = index - preload - (offset > 0 ? offset : 0); i < index; i += 1) {
      if (!(finite && i < 0)) {
        items.push({ slide: getSlide(slides, i), index: i });
      } else {
        items.push({ slide: null, index: i, placeholder: true });
      }
    }
    items.push({ slide: getSlide(slides, index), index });
    for (let i = index + 1; i <= index + preload - (offset < 0 ? offset : 0); i += 1) {
      if (!finite || i <= slides.length - 1) {
        items.push({ slide: getSlide(slides, i), index: i });
      } else {
        items.push({ slide: null, index: i, placeholder: true });
      }
    }
    if (offset > 0) {
      for (let i = index + preload + 1; i <= index + preload + offset; i += 1) {
        items.push({ slide: null, index: i, placeholder: true });
      }
    }
  }
  const handleClick = (slideIndex) => () => {
    if (slideIndex > index) {
      publish(ACTION_NEXT, { count: slideIndex - index });
    } else if (slideIndex < index) {
      publish(ACTION_PREV, { count: index - slideIndex });
    }
  };
  const { width, height, border, borderRadius, padding, gap, imageFit, vignette } = thumbnails;
  return React2.createElement(
    "div",
    { className: clsx(cssClass(cssPrefix("container")), cssClass(CLASS_FLEX_CENTER)), style: {
      ...width !== defaultThumbnailsProps.width ? { [cssVar(cssThumbnailPrefix("width"))]: `${boxSize(thumbnails, width)}px` } : null,
      ...height !== defaultThumbnailsProps.height ? { [cssVar(cssThumbnailPrefix("height"))]: `${boxSize(thumbnails, height)}px` } : null,
      ...border !== defaultThumbnailsProps.border ? { [cssVar(cssThumbnailPrefix("border"))]: `${border}px` } : null,
      ...borderRadius !== defaultThumbnailsProps.borderRadius ? { [cssVar(cssThumbnailPrefix("border_radius"))]: `${borderRadius}px` } : null,
      ...padding !== defaultThumbnailsProps.padding ? { [cssVar(cssThumbnailPrefix("padding"))]: `${padding}px` } : null,
      ...gap !== defaultThumbnailsProps.gap ? { [cssVar(cssThumbnailPrefix("gap"))]: `${gap}px` } : null,
      ...styles.thumbnailsContainer
    } },
    React2.createElement("nav", { ref: track, style: styles.thumbnailsTrack, className: clsx(cssClass(cssPrefix("track")), cssClass(CLASS_FLEX_CENTER)) }, items.map(({ slide, index: slideIndex, placeholder }) => {
      const fadeAnimationDuration = animationDuration / Math.abs(offset || 1);
      const fadeIn = offset > 0 && slideIndex > index + preload - offset && slideIndex <= index + preload || offset < 0 && slideIndex < index - preload - offset && slideIndex >= index - preload ? {
        duration: fadeAnimationDuration,
        delay: ((offset > 0 ? slideIndex - (index + preload - offset) : index - preload - offset - slideIndex) - 1) * fadeAnimationDuration
      } : void 0;
      const fadeOut = offset > 0 && slideIndex < index - preload || offset < 0 && slideIndex > index + preload ? {
        duration: fadeAnimationDuration,
        delay: (offset > 0 ? offset - (index - preload - slideIndex) : -offset - (slideIndex - (index + preload))) * fadeAnimationDuration
      } : void 0;
      return React2.createElement(Thumbnail, { key: slideIndex, rect: thumbnailRect, slide, imageFit, render, active: slideIndex === index, fadeIn, fadeOut, placeholder: Boolean(placeholder), onClick: handleClick(slideIndex), style: styles.thumbnail });
    })),
    vignette && React2.createElement("div", { className: cssClass(cssPrefix("vignette")) })
  );
}

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/ThumbnailsContainer.js
function ThumbnailsComponent({ thumbnails: thumbnailsProps, slides, carousel, animation, render, styles, children }) {
  const thumbnails = { ...defaultThumbnailsProps, ...thumbnailsProps };
  const ref = React3.useRef(null);
  const track = React3.createElement(ThumbnailsTrack, { container: ref, slides, thumbnails, carousel, animation, render, thumbnailRect: { width: thumbnails.width, height: thumbnails.height }, styles });
  return React3.createElement(
    "div",
    { ref, className: clsx(cssClass(cssPrefix()), cssClass(cssPrefix(`${thumbnails.position}`))) },
    (thumbnails.position === "start" || thumbnails.position === "top") && track,
    React3.createElement("div", { className: cssClass(cssPrefix("wrapper")) }, children),
    (thumbnails.position === "end" || thumbnails.position === "bottom") && track
  );
}

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/Thumbnails.js
var defaultThumbnailsProps = {
  position: "bottom",
  width: 120,
  height: 80,
  border: 1,
  borderRadius: 4,
  padding: 4,
  gap: 16,
  imageFit: "contain",
  vignette: true
};
var Thumbnails = ({ augment, contains, append, addParent }) => {
  augment(({ thumbnails, ...restProps }) => ({
    thumbnails: {
      ...defaultThumbnailsProps,
      ...thumbnails
    },
    ...restProps
  }));
  const module = createModule(PLUGIN_THUMBNAILS, ThumbnailsComponent);
  if (contains(PLUGIN_FULLSCREEN)) {
    append(PLUGIN_FULLSCREEN, module);
  } else {
    addParent(MODULE_CONTROLLER, module);
  }
};

// node_modules/yet-another-react-lightbox/dist/plugins/thumbnails/index.js
var thumbnails_default = Thumbnails;
export {
  thumbnails_default as default
};
//# sourceMappingURL=yet-another-react-lightbox_plugins_thumbnails.js.map
